x=c(1:5) is same as x=1:5
#is.integer(a) for checking type
#as.integer(a) for explicit type casting
#log(0),1/0  gives inf
#log(10,2)   is log 10 base 2
#1/Inf       0
#0/0         Nan
c(-1, 0, 1) / 0
#> [1] -Inf  NaN  Inf
is.na() is.finite() is.infinite()
#x <- 1:20  a vector with numbers from 1 to 20
x <- 1:5


x=matrix(vector,nrows,ncols,byrow=TRUE) byrow denotes row order or column order. A%*%B denotes matrix multiplication A*B denotes element wise multip
solve(matrix) gives inverse
t(m) gives transpose
determinant(m) 
data.frame(col1,col2,...)data.frame
which keyword returns the row name

stud$names[which.max(stud$total)] //returns the row name with max value of total
<dataFramename>$<column name>[conditional]


data frame indexing methods:
data[rowindices/vectors,column(1:n)/col num]
data[rownum,colnum] returns the exact elemt
data[c(1:k),] returns all columns of first k rows
data[,c(1:k)] returns all rows with the vals from specific 1 to k cols
data[,c(1,2,3)] return 1,2,3 cols for all rows

names(dataframe) displays all column names
nrow(data)
ncol(data)

DPLYR PACKAGE:
na.omit()
piping
filter(condition) normally data ,condition/ condition nature (and or)???
for select functions use it as dplyr:: select()
    Use of select function:
		select is used to subset the values of columns,
                we can use it like select(start_col_name: end_col_name) or dplyr::select(c(1:3))
                SELECT ALSO LETS U RETRIEVE BY USING EXCEPTION NATURE, SELECT(-1,-2)//RETRIEVE ALL COLUMNS EXCEPT 1 AND 2
    displaying RANDOM rows
                sample_n(p) (inside a pipe)
                sample_frac(float) //displays 

    SUBSETTING LETS YOU CONDITIONALLY RETRIEVE ROWS , AND IF SELECT IS USED WE CAN RETRIEVE SPECIFIC COLUMNS




DETECTING FAKE JEWELLERY THROUGH COMPUTER VISION
sqrt(a)
x
typeof(x) #integer
#x <- c(1:5) typeof gives numeric
#x <- vector() default datatype is logical
#x <- vector("character")
#x <- c(0.5,"p")   0.5 is converted to "0.5" bcuz char>numeric
#character>complex>numeric>integer>logical  "cannot perform non-sensical type conversion like char to int"
#length(x) gives length of vector x
#options(digits=2); 1/3 gives 0.33 or more ( minimum 2 or more)

#x <- c(1,2,3) y <- c(4,5,6,7)  then x +y gives 5 ,7,9,8 cycling
#x <- matrix(1:6,rows=3,cols=2)  fills the numbers in columnMajor order 
#x <- matrix(1:6,rows=3,cols=2,byrow=FALSE)  fills the numbers in rowMajor order 
# dim(vector) doesnt work dim(matrix) works
#x <- matrix(1:4,rows=3,cols=2)  fills the numbers and recycles
#x <- matrix(1:10,rows=3,cols=2) fills and ignores extra vals
#cbind(vector1,vector2) binds as columns
#rbind(vector1,vector2) binds as rows
#x%*%y multiplication of matrices x and y
#x*y element wise multiplication

#is.na(data), complete.cases(data)
#any(is.na(data))
#fill the missing values -->IMPUTATION
#mean(data$colname.na.rm=TRUE) calculates mean without the na value